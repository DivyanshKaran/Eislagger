// Prisma schema for the Sales Service
// This schema handles shops, transactions, orders, and customer feedback

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- SALES SERVICE MODELS ---

// Represents a single retail shop location
model Shop {
  id        String      @id @default(uuid())
  name      String
  location  String
  address   String?
  phone     String?
  email     String?
  managerId String?     // Manager's user ID from Auth service
  
  // Shop details
  hours     Json?       // {"monday": {"open": "09:00", "close": "21:00"}, ...}
  services  String[]    // ["dine-in", "takeout", "delivery"]
  capacity  Int?        // Maximum capacity
  status    ShopStatus  @default(Active)
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  stock         ShopStock[]
  transactions  PosTransaction[]
  purchaseOrders PurchaseOrder[]
  reviews       Review[]
  
  @@map("shops")
}

// Represents the stock of a specific flavor at a specific shop
model ShopStock {
  id          String   @id @default(uuid())
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  // Flavor information (cached from Inventory Service)
  flavorId    String
  flavorName  String
  flavorDescription String?
  category    String   // "Classic", "Chocolate", "International", "Premium", "Seasonal"
  
  // Pricing and stock
  pricePerUnit Decimal @db.Decimal(10, 2) // Retail price per scoop/tub
  costPerUnit  Decimal @db.Decimal(10, 2) // Cost price
  
  quantity    Float    // Current stock level
  minQuantity Float    // Minimum stock level for alerts
  maxQuantity Float    // Maximum stock level
  unit        String   // "scoops", "tubs", "liters", "gallons"
  
  // Stock status
  isAvailable Boolean  @default(true)
  allergies   String[]  // ["dairy", "nuts", "eggs"]
  expirationDate DateTime?
  
  // Relations
  transactionItems TransactionItem[]
  purchaseOrderItems PurchaseOrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([shopId, flavorId])
  @@map("shop_stock")
}

// Represents a single transaction at the Point of Sale
model PosTransaction {
  id          String   @id @default(uuid())
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
  
  // Transaction details
  transactionNumber String // Human-readable transaction number
  
  // User information (from JWT tokens)
  clerkId     String   // Clerk who processed the transaction
  patronId    String?  // Customer ID if registered user
  
  // Payment information
  subtotal    Decimal  @db.Decimal(12, 2)
  taxAmount   Decimal  @db.Decimal(12, 2) @default(0)
  discountAmount Decimal @db.Decimal(12, 2) @default(0)
  totalAmount Decimal  @db.Decimal(12, 2)
  
  // Payment method and status
  paymentMethod String // "cash", "card", "digital_wallet"
  paymentStatus PaymentStatus @default(Completed)
  
  // Customer information (for non-registered users)
  customerName String?
  customerEmail String?
  customerPhone String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  items       TransactionItem[]
  
  @@map("pos_transactions")
}

// An item within a POS transaction
model TransactionItem {
  id            String   @id @default(uuid())
  transactionId String
  transaction   PosTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  // Stock information
  stockId       String
  stock         ShopStock @relation(fields: [stockId], references: [id])
  
  // Item details
  flavorId      String
  flavorName    String
  quantity      Int      // Number of scoops/tubs sold
  unitPrice     Decimal  @db.Decimal(10, 2) // Price at time of sale
  totalPrice    Decimal  @db.Decimal(10, 2) // quantity * unitPrice
  
  // Customizations
  customizations String[] // ["extra_chocolate", "no_whip"]
  
  createdAt DateTime @default(now())
  
  @@map("transaction_items")
}

// A purchase order sent from a shop to request inventory
model PurchaseOrder {
  id        String      @id @default(uuid())
  shopId    String
  shop      Shop        @relation(fields: [shopId], references: [id])
  clerkId   String      // Clerk who created the order
  
  // Order details
  orderNumber String    // Human-readable order number
  status    PurchaseOrderStatus @default(Pending)
  priority  Priority   @default(Normal)
  
  // Calculated totals
  subtotal    Decimal  @db.Decimal(12, 2) @default(0)
  shippingAmount Decimal @db.Decimal(12, 2) @default(0)
  totalAmount Decimal  @db.Decimal(12, 2) @default(0)
  
  // Note and tracking
  notes      String?
  trackingNumber String?
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  fulfilledAt DateTime?
  
  // Relations
  items      PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

// An item within a purchase order
model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  // Stock information
  stockId         String
  stock           ShopStock @relation(fields: [stockId], references: [id])
  
  // Item details
  flavorId        String
  flavorName      String
  quantity        Float    // Amount to order
  unit            String   // "liters", "gallons", "tubs"
  unitCost        Decimal  @db.Decimal(10, 2) // Cost per unit
  totalCost       Decimal  @db.Decimal(12, 2) // quantity * unitCost
  
  createdAt DateTime @default(now())
  
  @@map("purchase_order_items")
}

// Customer reviews and feedback for shops
model Review {
  id        String   @id @default(uuid())
  shopId      String
  shop      Shop     @relation(fields: [shopId], references: [id])
  
  // Review details
  patronId  String?  // Customer ID if registered
  customerName String? // Name if anonymous
  customerEmail String? // Email if anonymous
  
  rating    Int      // 1 to 5 stars
  
  // Review content
  title     String?
  comment   String?
  
  // Review categories
  service   Int?     // 1 to 5 for service quality
  quality   Int?     // 1 to 5 for product quality
  cleanliness Int?   // 1 to 5 for shop cleanliness
  
  // Response from manager
  managerResponse String?
  managerResponseDate DateTime?
  
  // Helpful votes
  helpfulVotes Int @default(0)
  
  // Verification
  isVerified Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

// --- ENUMS ---

enum ShopStatus {
  Active
  Inactive
  Maintenance
  Closed
}

enum PaymentStatus {
  Pending
  Processing
  Completed
  Failed
  Refunded
}

enum PurchaseOrderStatus {
  Pending
  Submitted
  Approved
  Processing
  Shipped
  Delivered
  Cancelled
  Rejected
}

enum Priority {
  Low
  Normal
  High
  Urgent
}